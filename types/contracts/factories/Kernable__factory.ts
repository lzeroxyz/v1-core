/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Kernable, KernableInterface } from "../Kernable";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "kernel",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "kernel",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161012138038061012183398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b608f806100926000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063d4aae0c414602d575b600080fd5b6000546040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f3fea264697066735822122048549d13d0bf344dd34dc351ced17cc31e33b794828f02079f07b86d32bd0a9064736f6c63430008050033";

type KernableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: KernableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Kernable__factory extends ContractFactory {
  constructor(...args: KernableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Kernable";
  }

  deploy(
    kernel: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Kernable> {
    return super.deploy(kernel, overrides || {}) as Promise<Kernable>;
  }
  getDeployTransaction(
    kernel: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(kernel, overrides || {});
  }
  attach(address: string): Kernable {
    return super.attach(address) as Kernable;
  }
  connect(signer: Signer): Kernable__factory {
    return super.connect(signer) as Kernable__factory;
  }
  static readonly contractName: "Kernable";
  public readonly contractName: "Kernable";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): KernableInterface {
    return new utils.Interface(_abi) as KernableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Kernable {
    return new Contract(address, _abi, signerOrProvider) as Kernable;
  }
}
