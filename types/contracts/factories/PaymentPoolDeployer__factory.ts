/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  PaymentPoolDeployer,
  PaymentPoolDeployerInterface,
} from "../PaymentPoolDeployer";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "tokenAddress",
        type: "address",
      },
    ],
    name: "deployPaymentPool",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060ae8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c80631b96caf614602d575b600080fd5b603b6038366004603d565b50565b005b600060208284031215604e57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114607157600080fd5b939250505056fea2646970667358221220cb065006232f9ecf2f0e9b80c787e624139e71682ba6ce0320fb378d1cee560a64736f6c63430008050033";

type PaymentPoolDeployerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: PaymentPoolDeployerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class PaymentPoolDeployer__factory extends ContractFactory {
  constructor(...args: PaymentPoolDeployerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "PaymentPoolDeployer";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<PaymentPoolDeployer> {
    return super.deploy(overrides || {}) as Promise<PaymentPoolDeployer>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): PaymentPoolDeployer {
    return super.attach(address) as PaymentPoolDeployer;
  }
  connect(signer: Signer): PaymentPoolDeployer__factory {
    return super.connect(signer) as PaymentPoolDeployer__factory;
  }
  static readonly contractName: "PaymentPoolDeployer";
  public readonly contractName: "PaymentPoolDeployer";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): PaymentPoolDeployerInterface {
    return new utils.Interface(_abi) as PaymentPoolDeployerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): PaymentPoolDeployer {
    return new Contract(address, _abi, signerOrProvider) as PaymentPoolDeployer;
  }
}
