/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export type CreateGoodInputStruct = {
  from: string;
  tokenUri: string;
  acceptedTokens: string[];
};

export type CreateGoodInputStructOutput = [string, string, string[]] & {
  from: string;
  tokenUri: string;
  acceptedTokens: string[];
};

export type CreateGoodServiceInputStruct = {
  from: string;
  goodId: BigNumberish;
  capacity: BigNumberish;
  tokenUri: string;
};

export type CreateGoodServiceInputStructOutput = [
  string,
  BigNumber,
  BigNumber,
  string
] & { from: string; goodId: BigNumber; capacity: BigNumber; tokenUri: string };

export type CreateGoodServiceVoucherInputStruct = {
  from: string;
  goodId: BigNumberish;
  goodServiceId: BigNumberish;
  tokenUri: string;
  start: BigNumberish;
  end: BigNumberish;
  destructionType: BigNumberish;
};

export type CreateGoodServiceVoucherInputStructOutput = [
  string,
  BigNumber,
  BigNumber,
  string,
  BigNumber,
  BigNumber,
  number
] & {
  from: string;
  goodId: BigNumber;
  goodServiceId: BigNumber;
  tokenUri: string;
  start: BigNumber;
  end: BigNumber;
  destructionType: number;
};

export type GetGoodInputStruct = { goodOwner: string; goodId: BigNumberish };

export type GetGoodInputStructOutput = [string, BigNumber] & {
  goodOwner: string;
  goodId: BigNumber;
};

export type GetGoodOutputStruct = {
  state: BigNumberish;
  acceptedTokens: string[];
};

export type GetGoodOutputStructOutput = [number, string[]] & {
  state: number;
  acceptedTokens: string[];
};

export type GetGoodServiceInputStruct = {
  goodOwner: string;
  goodId: BigNumberish;
  goodServiceId: BigNumberish;
};

export type GetGoodServiceInputStructOutput = [string, BigNumber, BigNumber] & {
  goodOwner: string;
  goodId: BigNumber;
  goodServiceId: BigNumber;
};

export type GetGoodServiceOutputStruct = {
  goodState: BigNumberish;
  goodAcceptedTokens: string[];
  goodServiceCapacity: BigNumberish;
  goodServiceState: BigNumberish;
};

export type GetGoodServiceOutputStructOutput = [
  number,
  string[],
  BigNumber,
  number
] & {
  goodState: number;
  goodAcceptedTokens: string[];
  goodServiceCapacity: BigNumber;
  goodServiceState: number;
};

export type GetArrayGoodServiceVouchersInputStruct = {
  goodOwner: string;
  goodId: BigNumberish;
  goodServiceId: BigNumberish;
  goodServiceVoucherIds: BigNumberish[];
};

export type GetArrayGoodServiceVouchersInputStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber[]
] & {
  goodOwner: string;
  goodId: BigNumber;
  goodServiceId: BigNumber;
  goodServiceVoucherIds: BigNumber[];
};

export type GetArrayGoodServiceVouchersOutputStruct = {
  goodState: BigNumberish;
  goodAcceptedTokens: string[];
  goodServiceCapacity: BigNumberish;
  goodServiceState: BigNumberish;
  goodServiceVoucherStarts: BigNumberish[];
  goodServiceVoucherEnds: BigNumberish[];
  goodServiceVoucherAmounts: BigNumberish[];
  goodServiceVoucherStates: BigNumberish[];
  goodServiceVoucherDestructionTypes: BigNumberish[];
};

export type GetArrayGoodServiceVouchersOutputStructOutput = [
  number,
  string[],
  BigNumber,
  number,
  BigNumber[],
  BigNumber[],
  BigNumber[],
  number[],
  number[]
] & {
  goodState: number;
  goodAcceptedTokens: string[];
  goodServiceCapacity: BigNumber;
  goodServiceState: number;
  goodServiceVoucherStarts: BigNumber[];
  goodServiceVoucherEnds: BigNumber[];
  goodServiceVoucherAmounts: BigNumber[];
  goodServiceVoucherStates: number[];
  goodServiceVoucherDestructionTypes: number[];
};

export type GetGoodServiceVouchersInputStruct = {
  goodOwner: string;
  goodId: BigNumberish;
  goodServiceId: BigNumberish;
};

export type GetGoodServiceVouchersInputStructOutput = [
  string,
  BigNumber,
  BigNumber
] & { goodOwner: string; goodId: BigNumber; goodServiceId: BigNumber };

export type GetGoodServiceVouchersOutputStruct = {
  goodState: BigNumberish;
  goodAcceptedTokens: string[];
  goodServiceCapacity: BigNumberish;
  goodServiceState: BigNumberish;
  goodServiceVoucherIds: BigNumberish[];
  goodServiceVoucherStarts: BigNumberish[];
  goodServiceVoucherEnds: BigNumberish[];
  goodServiceVoucherAmounts: BigNumberish[];
  goodServiceVoucherStates: BigNumberish[];
  goodServiceVoucherDestructionTypes: BigNumberish[];
};

export type GetGoodServiceVouchersOutputStructOutput = [
  number,
  string[],
  BigNumber,
  number,
  BigNumber[],
  BigNumber[],
  BigNumber[],
  BigNumber[],
  number[],
  number[]
] & {
  goodState: number;
  goodAcceptedTokens: string[];
  goodServiceCapacity: BigNumber;
  goodServiceState: number;
  goodServiceVoucherIds: BigNumber[];
  goodServiceVoucherStarts: BigNumber[];
  goodServiceVoucherEnds: BigNumber[];
  goodServiceVoucherAmounts: BigNumber[];
  goodServiceVoucherStates: number[];
  goodServiceVoucherDestructionTypes: number[];
};

export type GetGoodServicesInputStruct = {
  goodOwner: string;
  goodId: BigNumberish;
};

export type GetGoodServicesInputStructOutput = [string, BigNumber] & {
  goodOwner: string;
  goodId: BigNumber;
};

export type GetGoodServicesOutputStruct = {
  goodState: BigNumberish;
  goodAcceptedTokens: string[];
  goodServiceIds: BigNumberish[];
  goodServiceCapacities: BigNumberish[];
  goodServiceStates: BigNumberish[];
};

export type GetGoodServicesOutputStructOutput = [
  number,
  string[],
  BigNumber[],
  BigNumber[],
  number[]
] & {
  goodState: number;
  goodAcceptedTokens: string[];
  goodServiceIds: BigNumber[];
  goodServiceCapacities: BigNumber[];
  goodServiceStates: number[];
};

export type GetGoodsInputStruct = { goodsOwner: string };

export type GetGoodsInputStructOutput = [string] & { goodsOwner: string };

export type GetGoodsOutputStruct = {
  ids: BigNumberish[];
  states: BigNumberish[];
  acceptedTokens: string[][];
};

export type GetGoodsOutputStructOutput = [BigNumber[], number[], string[][]] & {
  ids: BigNumber[];
  states: number[];
  acceptedTokens: string[][];
};

export type PauseGoodServiceInputStruct = {
  from: string;
  goodId: BigNumberish;
  goodServiceId: BigNumberish;
};

export type PauseGoodServiceInputStructOutput = [
  string,
  BigNumber,
  BigNumber
] & { from: string; goodId: BigNumber; goodServiceId: BigNumber };

export type RemoveGoodInputStruct = { from: string; goodId: BigNumberish };

export type RemoveGoodInputStructOutput = [string, BigNumber] & {
  from: string;
  goodId: BigNumber;
};

export type RemoveGoodServiceInputStruct = {
  from: string;
  goodId: BigNumberish;
  goodServiceId: BigNumberish;
};

export type RemoveGoodServiceInputStructOutput = [
  string,
  BigNumber,
  BigNumber
] & { from: string; goodId: BigNumber; goodServiceId: BigNumber };

export type RemoveGoodServiceVoucherInputStruct = {
  from: string;
  goodId: BigNumberish;
  goodServiceId: BigNumberish;
  goodServiceVoucherId: BigNumberish;
};

export type RemoveGoodServiceVoucherInputStructOutput = [
  string,
  BigNumber,
  BigNumber,
  BigNumber
] & {
  from: string;
  goodId: BigNumber;
  goodServiceId: BigNumber;
  goodServiceVoucherId: BigNumber;
};

export type UnPauseGoodServiceInputStruct = {
  from: string;
  goodId: BigNumberish;
  goodServiceId: BigNumberish;
};

export type UnPauseGoodServiceInputStructOutput = [
  string,
  BigNumber,
  BigNumber
] & { from: string; goodId: BigNumber; goodServiceId: BigNumber };

export interface GoodKernelMockInterface extends utils.Interface {
  contractName: "GoodKernelMock";
  functions: {
    "createGood((address,string,address[]))": FunctionFragment;
    "createGoodService((address,uint256,uint256,string))": FunctionFragment;
    "createGoodServiceVoucher((address,uint256,uint256,string,uint128,uint128,uint8))": FunctionFragment;
    "getGood((address,uint256))": FunctionFragment;
    "getGoodService((address,uint256,uint256))": FunctionFragment;
    "getGoodServiceVouchers((address,uint256,uint256,uint256[]))": FunctionFragment;
    "getGoodServices((address,uint256))": FunctionFragment;
    "getGoods((address))": FunctionFragment;
    "owner()": FunctionFragment;
    "pause()": FunctionFragment;
    "pauseGood(address,uint256)": FunctionFragment;
    "pauseGoodService((address,uint256,uint256))": FunctionFragment;
    "paused()": FunctionFragment;
    "removeGood((address,uint256))": FunctionFragment;
    "removeGoodService((address,uint256,uint256))": FunctionFragment;
    "removeGoodServiceVoucher((address,uint256,uint256,uint256))": FunctionFragment;
    "removeGoodServices(address,uint256,uint256[])": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "router()": FunctionFragment;
    "setRouter(address)": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "unpause()": FunctionFragment;
    "unpauseGood(address,uint256)": FunctionFragment;
    "unpauseGoodService((address,uint256,uint256))": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "createGood",
    values: [CreateGoodInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createGoodService",
    values: [CreateGoodServiceInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "createGoodServiceVoucher",
    values: [CreateGoodServiceVoucherInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getGood",
    values: [GetGoodInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getGoodService",
    values: [GetGoodServiceInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getGoodServiceVouchers",
    values: [GetArrayGoodServiceVouchersInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getGoodServices",
    values: [GetGoodServicesInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "getGoods",
    values: [GetGoodsInputStruct]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "pauseGood",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "pauseGoodService",
    values: [PauseGoodServiceInputStruct]
  ): string;
  encodeFunctionData(functionFragment: "paused", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeGood",
    values: [RemoveGoodInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGoodService",
    values: [RemoveGoodServiceInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGoodServiceVoucher",
    values: [RemoveGoodServiceVoucherInputStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "removeGoodServices",
    values: [string, BigNumberish, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "router", values?: undefined): string;
  encodeFunctionData(functionFragment: "setRouter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "unpauseGood",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "unpauseGoodService",
    values: [UnPauseGoodServiceInputStruct]
  ): string;

  decodeFunctionResult(functionFragment: "createGood", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createGoodService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createGoodServiceVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGood", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getGoodService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGoodServiceVouchers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGoodServices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getGoods", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "pauseGood", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "pauseGoodService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "paused", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "removeGood", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeGoodService",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGoodServiceVoucher",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeGoodServices",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "router", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRouter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unpauseGood",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "unpauseGoodService",
    data: BytesLike
  ): Result;

  events: {
    "GoodBurned(address,uint256)": EventFragment;
    "GoodCreated(address,uint256,uint8,string)": EventFragment;
    "GoodPaused(address,uint256)": EventFragment;
    "GoodServiceBurned(address,uint256,uint256)": EventFragment;
    "GoodServiceCreated(address,uint256,uint256,uint8,string)": EventFragment;
    "GoodServicePaused(address,uint256,uint256)": EventFragment;
    "GoodServiceUnpaused(address,uint256,uint256)": EventFragment;
    "GoodServiceVoucherBurned(address,uint256,uint256,uint256)": EventFragment;
    "GoodServiceVoucherCreated(address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint8,uint256)": EventFragment;
    "GoodServiceVoucherPaused()": EventFragment;
    "GoodUnpaused(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "Paused(address)": EventFragment;
    "Unpaused(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GoodBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GoodCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GoodPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GoodServiceBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GoodServiceCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GoodServicePaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GoodServiceUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GoodServiceVoucherBurned"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GoodServiceVoucherCreated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GoodServiceVoucherPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "GoodUnpaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Paused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unpaused"): EventFragment;
}

export type GoodBurnedEvent = TypedEvent<
  [string, BigNumber],
  { from: string; goodId: BigNumber }
>;

export type GoodBurnedEventFilter = TypedEventFilter<GoodBurnedEvent>;

export type GoodCreatedEvent = TypedEvent<
  [string, BigNumber, number, string],
  { from: string; goodId: BigNumber; goodState: number; goodUri: string }
>;

export type GoodCreatedEventFilter = TypedEventFilter<GoodCreatedEvent>;

export type GoodPausedEvent = TypedEvent<
  [string, BigNumber],
  { from: string; goodId: BigNumber }
>;

export type GoodPausedEventFilter = TypedEventFilter<GoodPausedEvent>;

export type GoodServiceBurnedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { from: string; goodId: BigNumber; goodServiceId: BigNumber }
>;

export type GoodServiceBurnedEventFilter =
  TypedEventFilter<GoodServiceBurnedEvent>;

export type GoodServiceCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, number, string],
  {
    from: string;
    goodId: BigNumber;
    goodServiceId: BigNumber;
    goodServiceState: number;
    goodServiceUri: string;
  }
>;

export type GoodServiceCreatedEventFilter =
  TypedEventFilter<GoodServiceCreatedEvent>;

export type GoodServicePausedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { from: string; goodId: BigNumber; goodServiceId: BigNumber }
>;

export type GoodServicePausedEventFilter =
  TypedEventFilter<GoodServicePausedEvent>;

export type GoodServiceUnpausedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { from: string; goodId: BigNumber; goodServiceId: BigNumber }
>;

export type GoodServiceUnpausedEventFilter =
  TypedEventFilter<GoodServiceUnpausedEvent>;

export type GoodServiceVoucherBurnedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    from: string;
    goodId: BigNumber;
    goodServiceId: BigNumber;
    goodServiceVoucherId: BigNumber;
  }
>;

export type GoodServiceVoucherBurnedEventFilter =
  TypedEventFilter<GoodServiceVoucherBurnedEvent>;

export type GoodServiceVoucherCreatedEvent = TypedEvent<
  [
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    number,
    BigNumber
  ],
  {
    from: string;
    goodId: BigNumber;
    goodServiceId: BigNumber;
    goodServiceVoucherId: BigNumber;
    goodServiceVoucherStart: BigNumber;
    goodServiceVoucherEnd: BigNumber;
    goodServiceVoucherAmount: BigNumber;
    goodServiceVoucherState: number;
    goodServiceVoucherDestructionType: number;
    goodServiceVoucherUri: BigNumber;
  }
>;

export type GoodServiceVoucherCreatedEventFilter =
  TypedEventFilter<GoodServiceVoucherCreatedEvent>;

export type GoodServiceVoucherPausedEvent = TypedEvent<[], {}>;

export type GoodServiceVoucherPausedEventFilter =
  TypedEventFilter<GoodServiceVoucherPausedEvent>;

export type GoodUnpausedEvent = TypedEvent<
  [string, BigNumber],
  { from: string; goodId: BigNumber }
>;

export type GoodUnpausedEventFilter = TypedEventFilter<GoodUnpausedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type PausedEvent = TypedEvent<[string], { account: string }>;

export type PausedEventFilter = TypedEventFilter<PausedEvent>;

export type UnpausedEvent = TypedEvent<[string], { account: string }>;

export type UnpausedEventFilter = TypedEventFilter<UnpausedEvent>;

export interface GoodKernelMock extends BaseContract {
  contractName: "GoodKernelMock";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GoodKernelMockInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    createGood(
      createGoodInput: CreateGoodInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createGood((address,string,address[]))"(
      createGoodInput: CreateGoodInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createGoodService(
      createGoodServiceInput: CreateGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createGoodService((address,uint256,uint256,string))"(
      createGoodServiceInput: CreateGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    createGoodServiceVoucher(
      createGoodServiceVoucher: CreateGoodServiceVoucherInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "createGoodServiceVoucher((address,uint256,uint256,string,uint128,uint128,uint8))"(
      createGoodServiceVoucher: CreateGoodServiceVoucherInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getGood(
      input: GetGoodInputStruct,
      overrides?: CallOverrides
    ): Promise<
      [GetGoodOutputStructOutput] & { output: GetGoodOutputStructOutput }
    >;

    "getGood((address,uint256))"(
      input: GetGoodInputStruct,
      overrides?: CallOverrides
    ): Promise<
      [GetGoodOutputStructOutput] & { output: GetGoodOutputStructOutput }
    >;

    getGoodService(
      input: GetGoodServiceInputStruct,
      overrides?: CallOverrides
    ): Promise<
      [GetGoodServiceOutputStructOutput] & {
        output: GetGoodServiceOutputStructOutput;
      }
    >;

    "getGoodService((address,uint256,uint256))"(
      input: GetGoodServiceInputStruct,
      overrides?: CallOverrides
    ): Promise<
      [GetGoodServiceOutputStructOutput] & {
        output: GetGoodServiceOutputStructOutput;
      }
    >;

    "getGoodServiceVouchers((address,uint256,uint256,uint256[]))"(
      input: GetArrayGoodServiceVouchersInputStruct,
      overrides?: CallOverrides
    ): Promise<
      [GetArrayGoodServiceVouchersOutputStructOutput] & {
        output: GetArrayGoodServiceVouchersOutputStructOutput;
      }
    >;

    "getGoodServiceVouchers((address,uint256,uint256))"(
      input: GetGoodServiceVouchersInputStruct,
      overrides?: CallOverrides
    ): Promise<
      [GetGoodServiceVouchersOutputStructOutput] & {
        output: GetGoodServiceVouchersOutputStructOutput;
      }
    >;

    getGoodServices(
      input: GetGoodServicesInputStruct,
      overrides?: CallOverrides
    ): Promise<
      [GetGoodServicesOutputStructOutput] & {
        output: GetGoodServicesOutputStructOutput;
      }
    >;

    "getGoodServices((address,uint256))"(
      input: GetGoodServicesInputStruct,
      overrides?: CallOverrides
    ): Promise<
      [GetGoodServicesOutputStructOutput] & {
        output: GetGoodServicesOutputStructOutput;
      }
    >;

    getGoods(
      input: GetGoodsInputStruct,
      overrides?: CallOverrides
    ): Promise<
      [GetGoodsOutputStructOutput] & { output: GetGoodsOutputStructOutput }
    >;

    "getGoods((address))"(
      input: GetGoodsInputStruct,
      overrides?: CallOverrides
    ): Promise<
      [GetGoodsOutputStructOutput] & { output: GetGoodsOutputStructOutput }
    >;

    owner(overrides?: CallOverrides): Promise<[string]>;

    "owner()"(overrides?: CallOverrides): Promise<[string]>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseGood(
      from: string,
      goodId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pauseGood(address,uint256)"(
      from: string,
      goodId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    pauseGoodService(
      pauseGoodServiceInput: PauseGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "pauseGoodService((address,uint256,uint256))"(
      pauseGoodServiceInput: PauseGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    "paused()"(overrides?: CallOverrides): Promise<[boolean]>;

    removeGood(
      removeGoodInput: RemoveGoodInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeGood((address,uint256))"(
      removeGoodInput: RemoveGoodInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeGoodService(
      removeGoodServiceInput: RemoveGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeGoodService((address,uint256,uint256))"(
      removeGoodServiceInput: RemoveGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeGoodServiceVoucher(
      removeGoodServiceVoucher: RemoveGoodServiceVoucherInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeGoodServiceVoucher((address,uint256,uint256,uint256))"(
      removeGoodServiceVoucher: RemoveGoodServiceVoucherInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    removeGoodServices(
      from: string,
      goodId: BigNumberish,
      goodServiceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "removeGoodServices(address,uint256,uint256[])"(
      from: string,
      goodId: BigNumberish,
      goodServiceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    router(overrides?: CallOverrides): Promise<[string]>;

    "router()"(overrides?: CallOverrides): Promise<[string]>;

    setRouter(
      newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "setRouter(address)"(
      newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseGood(
      from: string,
      goodId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unpauseGood(address,uint256)"(
      from: string,
      goodId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unpauseGoodService(
      unpauseGoodServiceInput: UnPauseGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unpauseGoodService((address,uint256,uint256))"(
      unpauseGoodServiceInput: UnPauseGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  createGood(
    createGoodInput: CreateGoodInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createGood((address,string,address[]))"(
    createGoodInput: CreateGoodInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createGoodService(
    createGoodServiceInput: CreateGoodServiceInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createGoodService((address,uint256,uint256,string))"(
    createGoodServiceInput: CreateGoodServiceInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  createGoodServiceVoucher(
    createGoodServiceVoucher: CreateGoodServiceVoucherInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "createGoodServiceVoucher((address,uint256,uint256,string,uint128,uint128,uint8))"(
    createGoodServiceVoucher: CreateGoodServiceVoucherInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getGood(
    input: GetGoodInputStruct,
    overrides?: CallOverrides
  ): Promise<GetGoodOutputStructOutput>;

  "getGood((address,uint256))"(
    input: GetGoodInputStruct,
    overrides?: CallOverrides
  ): Promise<GetGoodOutputStructOutput>;

  getGoodService(
    input: GetGoodServiceInputStruct,
    overrides?: CallOverrides
  ): Promise<GetGoodServiceOutputStructOutput>;

  "getGoodService((address,uint256,uint256))"(
    input: GetGoodServiceInputStruct,
    overrides?: CallOverrides
  ): Promise<GetGoodServiceOutputStructOutput>;

  "getGoodServiceVouchers((address,uint256,uint256,uint256[]))"(
    input: GetArrayGoodServiceVouchersInputStruct,
    overrides?: CallOverrides
  ): Promise<GetArrayGoodServiceVouchersOutputStructOutput>;

  "getGoodServiceVouchers((address,uint256,uint256))"(
    input: GetGoodServiceVouchersInputStruct,
    overrides?: CallOverrides
  ): Promise<GetGoodServiceVouchersOutputStructOutput>;

  getGoodServices(
    input: GetGoodServicesInputStruct,
    overrides?: CallOverrides
  ): Promise<GetGoodServicesOutputStructOutput>;

  "getGoodServices((address,uint256))"(
    input: GetGoodServicesInputStruct,
    overrides?: CallOverrides
  ): Promise<GetGoodServicesOutputStructOutput>;

  getGoods(
    input: GetGoodsInputStruct,
    overrides?: CallOverrides
  ): Promise<GetGoodsOutputStructOutput>;

  "getGoods((address))"(
    input: GetGoodsInputStruct,
    overrides?: CallOverrides
  ): Promise<GetGoodsOutputStructOutput>;

  owner(overrides?: CallOverrides): Promise<string>;

  "owner()"(overrides?: CallOverrides): Promise<string>;

  pause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseGood(
    from: string,
    goodId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pauseGood(address,uint256)"(
    from: string,
    goodId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  pauseGoodService(
    pauseGoodServiceInput: PauseGoodServiceInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "pauseGoodService((address,uint256,uint256))"(
    pauseGoodServiceInput: PauseGoodServiceInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  "paused()"(overrides?: CallOverrides): Promise<boolean>;

  removeGood(
    removeGoodInput: RemoveGoodInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeGood((address,uint256))"(
    removeGoodInput: RemoveGoodInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeGoodService(
    removeGoodServiceInput: RemoveGoodServiceInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeGoodService((address,uint256,uint256))"(
    removeGoodServiceInput: RemoveGoodServiceInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeGoodServiceVoucher(
    removeGoodServiceVoucher: RemoveGoodServiceVoucherInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeGoodServiceVoucher((address,uint256,uint256,uint256))"(
    removeGoodServiceVoucher: RemoveGoodServiceVoucherInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  removeGoodServices(
    from: string,
    goodId: BigNumberish,
    goodServiceIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "removeGoodServices(address,uint256,uint256[])"(
    from: string,
    goodId: BigNumberish,
    goodServiceIds: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "renounceOwnership()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  router(overrides?: CallOverrides): Promise<string>;

  "router()"(overrides?: CallOverrides): Promise<string>;

  setRouter(
    newRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "setRouter(address)"(
    newRouter: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  "supportsInterface(bytes4)"(
    interfaceId: BytesLike,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "transferOwnership(address)"(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unpause()"(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpauseGood(
    from: string,
    goodId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unpauseGood(address,uint256)"(
    from: string,
    goodId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unpauseGoodService(
    unpauseGoodServiceInput: UnPauseGoodServiceInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unpauseGoodService((address,uint256,uint256))"(
    unpauseGoodServiceInput: UnPauseGoodServiceInputStruct,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    createGood(
      createGoodInput: CreateGoodInputStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number]>;

    "createGood((address,string,address[]))"(
      createGoodInput: CreateGoodInputStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number]>;

    createGoodService(
      createGoodServiceInput: CreateGoodServiceInputStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number]>;

    "createGoodService((address,uint256,uint256,string))"(
      createGoodServiceInput: CreateGoodServiceInputStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, number]>;

    createGoodServiceVoucher(
      createGoodServiceVoucher: CreateGoodServiceVoucherInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "createGoodServiceVoucher((address,uint256,uint256,string,uint128,uint128,uint8))"(
      createGoodServiceVoucher: CreateGoodServiceVoucherInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGood(
      input: GetGoodInputStruct,
      overrides?: CallOverrides
    ): Promise<GetGoodOutputStructOutput>;

    "getGood((address,uint256))"(
      input: GetGoodInputStruct,
      overrides?: CallOverrides
    ): Promise<GetGoodOutputStructOutput>;

    getGoodService(
      input: GetGoodServiceInputStruct,
      overrides?: CallOverrides
    ): Promise<GetGoodServiceOutputStructOutput>;

    "getGoodService((address,uint256,uint256))"(
      input: GetGoodServiceInputStruct,
      overrides?: CallOverrides
    ): Promise<GetGoodServiceOutputStructOutput>;

    "getGoodServiceVouchers((address,uint256,uint256,uint256[]))"(
      input: GetArrayGoodServiceVouchersInputStruct,
      overrides?: CallOverrides
    ): Promise<GetArrayGoodServiceVouchersOutputStructOutput>;

    "getGoodServiceVouchers((address,uint256,uint256))"(
      input: GetGoodServiceVouchersInputStruct,
      overrides?: CallOverrides
    ): Promise<GetGoodServiceVouchersOutputStructOutput>;

    getGoodServices(
      input: GetGoodServicesInputStruct,
      overrides?: CallOverrides
    ): Promise<GetGoodServicesOutputStructOutput>;

    "getGoodServices((address,uint256))"(
      input: GetGoodServicesInputStruct,
      overrides?: CallOverrides
    ): Promise<GetGoodServicesOutputStructOutput>;

    getGoods(
      input: GetGoodsInputStruct,
      overrides?: CallOverrides
    ): Promise<GetGoodsOutputStructOutput>;

    "getGoods((address))"(
      input: GetGoodsInputStruct,
      overrides?: CallOverrides
    ): Promise<GetGoodsOutputStructOutput>;

    owner(overrides?: CallOverrides): Promise<string>;

    "owner()"(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    "pause()"(overrides?: CallOverrides): Promise<void>;

    pauseGood(
      from: string,
      goodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "pauseGood(address,uint256)"(
      from: string,
      goodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    pauseGoodService(
      pauseGoodServiceInput: PauseGoodServiceInputStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "pauseGoodService((address,uint256,uint256))"(
      pauseGoodServiceInput: PauseGoodServiceInputStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    "paused()"(overrides?: CallOverrides): Promise<boolean>;

    removeGood(
      removeGoodInput: RemoveGoodInputStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeGood((address,uint256))"(
      removeGoodInput: RemoveGoodInputStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removeGoodService(
      removeGoodServiceInput: RemoveGoodServiceInputStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeGoodService((address,uint256,uint256))"(
      removeGoodServiceInput: RemoveGoodServiceInputStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removeGoodServiceVoucher(
      removeGoodServiceVoucher: RemoveGoodServiceVoucherInputStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "removeGoodServiceVoucher((address,uint256,uint256,uint256))"(
      removeGoodServiceVoucher: RemoveGoodServiceVoucherInputStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    removeGoodServices(
      from: string,
      goodId: BigNumberish,
      goodServiceIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    "removeGoodServices(address,uint256,uint256[])"(
      from: string,
      goodId: BigNumberish,
      goodServiceIds: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<void>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    "renounceOwnership()"(overrides?: CallOverrides): Promise<void>;

    router(overrides?: CallOverrides): Promise<string>;

    "router()"(overrides?: CallOverrides): Promise<string>;

    setRouter(newRouter: string, overrides?: CallOverrides): Promise<void>;

    "setRouter(address)"(
      newRouter: string,
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    "unpause()"(overrides?: CallOverrides): Promise<void>;

    unpauseGood(
      from: string,
      goodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    "unpauseGood(address,uint256)"(
      from: string,
      goodId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    unpauseGoodService(
      unpauseGoodServiceInput: UnPauseGoodServiceInputStruct,
      overrides?: CallOverrides
    ): Promise<void>;

    "unpauseGoodService((address,uint256,uint256))"(
      unpauseGoodServiceInput: UnPauseGoodServiceInputStruct,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "GoodBurned(address,uint256)"(
      from?: null,
      goodId?: null
    ): GoodBurnedEventFilter;
    GoodBurned(from?: null, goodId?: null): GoodBurnedEventFilter;

    "GoodCreated(address,uint256,uint8,string)"(
      from?: null,
      goodId?: null,
      goodState?: null,
      goodUri?: null
    ): GoodCreatedEventFilter;
    GoodCreated(
      from?: null,
      goodId?: null,
      goodState?: null,
      goodUri?: null
    ): GoodCreatedEventFilter;

    "GoodPaused(address,uint256)"(
      from?: null,
      goodId?: null
    ): GoodPausedEventFilter;
    GoodPaused(from?: null, goodId?: null): GoodPausedEventFilter;

    "GoodServiceBurned(address,uint256,uint256)"(
      from?: null,
      goodId?: null,
      goodServiceId?: null
    ): GoodServiceBurnedEventFilter;
    GoodServiceBurned(
      from?: null,
      goodId?: null,
      goodServiceId?: null
    ): GoodServiceBurnedEventFilter;

    "GoodServiceCreated(address,uint256,uint256,uint8,string)"(
      from?: null,
      goodId?: null,
      goodServiceId?: null,
      goodServiceState?: null,
      goodServiceUri?: null
    ): GoodServiceCreatedEventFilter;
    GoodServiceCreated(
      from?: null,
      goodId?: null,
      goodServiceId?: null,
      goodServiceState?: null,
      goodServiceUri?: null
    ): GoodServiceCreatedEventFilter;

    "GoodServicePaused(address,uint256,uint256)"(
      from?: null,
      goodId?: null,
      goodServiceId?: null
    ): GoodServicePausedEventFilter;
    GoodServicePaused(
      from?: null,
      goodId?: null,
      goodServiceId?: null
    ): GoodServicePausedEventFilter;

    "GoodServiceUnpaused(address,uint256,uint256)"(
      from?: null,
      goodId?: null,
      goodServiceId?: null
    ): GoodServiceUnpausedEventFilter;
    GoodServiceUnpaused(
      from?: null,
      goodId?: null,
      goodServiceId?: null
    ): GoodServiceUnpausedEventFilter;

    "GoodServiceVoucherBurned(address,uint256,uint256,uint256)"(
      from?: null,
      goodId?: null,
      goodServiceId?: null,
      goodServiceVoucherId?: null
    ): GoodServiceVoucherBurnedEventFilter;
    GoodServiceVoucherBurned(
      from?: null,
      goodId?: null,
      goodServiceId?: null,
      goodServiceVoucherId?: null
    ): GoodServiceVoucherBurnedEventFilter;

    "GoodServiceVoucherCreated(address,uint256,uint256,uint256,uint256,uint256,uint256,uint8,uint8,uint256)"(
      from?: null,
      goodId?: null,
      goodServiceId?: null,
      goodServiceVoucherId?: null,
      goodServiceVoucherStart?: null,
      goodServiceVoucherEnd?: null,
      goodServiceVoucherAmount?: null,
      goodServiceVoucherState?: null,
      goodServiceVoucherDestructionType?: null,
      goodServiceVoucherUri?: null
    ): GoodServiceVoucherCreatedEventFilter;
    GoodServiceVoucherCreated(
      from?: null,
      goodId?: null,
      goodServiceId?: null,
      goodServiceVoucherId?: null,
      goodServiceVoucherStart?: null,
      goodServiceVoucherEnd?: null,
      goodServiceVoucherAmount?: null,
      goodServiceVoucherState?: null,
      goodServiceVoucherDestructionType?: null,
      goodServiceVoucherUri?: null
    ): GoodServiceVoucherCreatedEventFilter;

    "GoodServiceVoucherPaused()"(): GoodServiceVoucherPausedEventFilter;
    GoodServiceVoucherPaused(): GoodServiceVoucherPausedEventFilter;

    "GoodUnpaused(address,uint256)"(
      from?: null,
      goodId?: null
    ): GoodUnpausedEventFilter;
    GoodUnpaused(from?: null, goodId?: null): GoodUnpausedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "Paused(address)"(account?: null): PausedEventFilter;
    Paused(account?: null): PausedEventFilter;

    "Unpaused(address)"(account?: null): UnpausedEventFilter;
    Unpaused(account?: null): UnpausedEventFilter;
  };

  estimateGas: {
    createGood(
      createGoodInput: CreateGoodInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createGood((address,string,address[]))"(
      createGoodInput: CreateGoodInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createGoodService(
      createGoodServiceInput: CreateGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createGoodService((address,uint256,uint256,string))"(
      createGoodServiceInput: CreateGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    createGoodServiceVoucher(
      createGoodServiceVoucher: CreateGoodServiceVoucherInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "createGoodServiceVoucher((address,uint256,uint256,string,uint128,uint128,uint8))"(
      createGoodServiceVoucher: CreateGoodServiceVoucherInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getGood(
      input: GetGoodInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGood((address,uint256))"(
      input: GetGoodInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGoodService(
      input: GetGoodServiceInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGoodService((address,uint256,uint256))"(
      input: GetGoodServiceInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGoodServiceVouchers((address,uint256,uint256,uint256[]))"(
      input: GetArrayGoodServiceVouchersInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGoodServiceVouchers((address,uint256,uint256))"(
      input: GetGoodServiceVouchersInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGoodServices(
      input: GetGoodServicesInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGoodServices((address,uint256))"(
      input: GetGoodServicesInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getGoods(
      input: GetGoodsInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "getGoods((address))"(
      input: GetGoodsInputStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    "owner()"(overrides?: CallOverrides): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseGood(
      from: string,
      goodId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pauseGood(address,uint256)"(
      from: string,
      goodId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    pauseGoodService(
      pauseGoodServiceInput: PauseGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "pauseGoodService((address,uint256,uint256))"(
      pauseGoodServiceInput: PauseGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    "paused()"(overrides?: CallOverrides): Promise<BigNumber>;

    removeGood(
      removeGoodInput: RemoveGoodInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeGood((address,uint256))"(
      removeGoodInput: RemoveGoodInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeGoodService(
      removeGoodServiceInput: RemoveGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeGoodService((address,uint256,uint256))"(
      removeGoodServiceInput: RemoveGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeGoodServiceVoucher(
      removeGoodServiceVoucher: RemoveGoodServiceVoucherInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeGoodServiceVoucher((address,uint256,uint256,uint256))"(
      removeGoodServiceVoucher: RemoveGoodServiceVoucherInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    removeGoodServices(
      from: string,
      goodId: BigNumberish,
      goodServiceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "removeGoodServices(address,uint256,uint256[])"(
      from: string,
      goodId: BigNumberish,
      goodServiceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    router(overrides?: CallOverrides): Promise<BigNumber>;

    "router()"(overrides?: CallOverrides): Promise<BigNumber>;

    setRouter(
      newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "setRouter(address)"(
      newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpauseGood(
      from: string,
      goodId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unpauseGood(address,uint256)"(
      from: string,
      goodId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unpauseGoodService(
      unpauseGoodServiceInput: UnPauseGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unpauseGoodService((address,uint256,uint256))"(
      unpauseGoodServiceInput: UnPauseGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    createGood(
      createGoodInput: CreateGoodInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createGood((address,string,address[]))"(
      createGoodInput: CreateGoodInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createGoodService(
      createGoodServiceInput: CreateGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createGoodService((address,uint256,uint256,string))"(
      createGoodServiceInput: CreateGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    createGoodServiceVoucher(
      createGoodServiceVoucher: CreateGoodServiceVoucherInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "createGoodServiceVoucher((address,uint256,uint256,string,uint128,uint128,uint8))"(
      createGoodServiceVoucher: CreateGoodServiceVoucherInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getGood(
      input: GetGoodInputStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGood((address,uint256))"(
      input: GetGoodInputStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGoodService(
      input: GetGoodServiceInputStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGoodService((address,uint256,uint256))"(
      input: GetGoodServiceInputStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGoodServiceVouchers((address,uint256,uint256,uint256[]))"(
      input: GetArrayGoodServiceVouchersInputStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGoodServiceVouchers((address,uint256,uint256))"(
      input: GetGoodServiceVouchersInputStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGoodServices(
      input: GetGoodServicesInputStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGoodServices((address,uint256))"(
      input: GetGoodServicesInputStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getGoods(
      input: GetGoodsInputStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "getGoods((address))"(
      input: GetGoodsInputStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "owner()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseGood(
      from: string,
      goodId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pauseGood(address,uint256)"(
      from: string,
      goodId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    pauseGoodService(
      pauseGoodServiceInput: PauseGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "pauseGoodService((address,uint256,uint256))"(
      pauseGoodServiceInput: PauseGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "paused()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeGood(
      removeGoodInput: RemoveGoodInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeGood((address,uint256))"(
      removeGoodInput: RemoveGoodInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeGoodService(
      removeGoodServiceInput: RemoveGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeGoodService((address,uint256,uint256))"(
      removeGoodServiceInput: RemoveGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeGoodServiceVoucher(
      removeGoodServiceVoucher: RemoveGoodServiceVoucherInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeGoodServiceVoucher((address,uint256,uint256,uint256))"(
      removeGoodServiceVoucher: RemoveGoodServiceVoucherInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    removeGoodServices(
      from: string,
      goodId: BigNumberish,
      goodServiceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "removeGoodServices(address,uint256,uint256[])"(
      from: string,
      goodId: BigNumberish,
      goodServiceIds: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "renounceOwnership()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    router(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    "router()"(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setRouter(
      newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "setRouter(address)"(
      newRouter: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "supportsInterface(bytes4)"(
      interfaceId: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "transferOwnership(address)"(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unpause()"(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpauseGood(
      from: string,
      goodId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unpauseGood(address,uint256)"(
      from: string,
      goodId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unpauseGoodService(
      unpauseGoodServiceInput: UnPauseGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unpauseGoodService((address,uint256,uint256))"(
      unpauseGoodServiceInput: UnPauseGoodServiceInputStruct,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
