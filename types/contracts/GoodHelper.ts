/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { BaseContract, BigNumber, Signer, utils } from 'ethers';
import { EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface GoodHelperInterface extends utils.Interface {
  contractName: 'GoodHelper';
  functions: {};

  events: {
    'GoodBurned(address,uint256)': EventFragment;
    'GoodCreated(address,uint256,uint8,string)': EventFragment;
    'GoodPaused(address,uint256)': EventFragment;
    'GoodServiceBurned(address,uint256,uint256)': EventFragment;
    'GoodServiceCreated(address,uint256,uint256,uint8,string)': EventFragment;
    'GoodServicePaused(address,uint256,uint256)': EventFragment;
    'GoodServiceUnpaused(address,uint256,uint256)': EventFragment;
    'GoodUnpaused(address,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'GoodBurned'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GoodCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GoodPaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GoodServiceBurned'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GoodServiceCreated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GoodServicePaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GoodServiceUnpaused'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'GoodUnpaused'): EventFragment;
}

export type GoodBurnedEvent = TypedEvent<
  [string, BigNumber],
  { from: string; goodId: BigNumber }
>;

export type GoodBurnedEventFilter = TypedEventFilter<GoodBurnedEvent>;

export type GoodCreatedEvent = TypedEvent<
  [string, BigNumber, number, string],
  { from: string; goodId: BigNumber; goodState: number; goodUri: string }
>;

export type GoodCreatedEventFilter = TypedEventFilter<GoodCreatedEvent>;

export type GoodPausedEvent = TypedEvent<
  [string, BigNumber],
  { from: string; goodId: BigNumber }
>;

export type GoodPausedEventFilter = TypedEventFilter<GoodPausedEvent>;

export type GoodServiceBurnedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { from: string; goodId: BigNumber; goodServiceId: BigNumber }
>;

export type GoodServiceBurnedEventFilter =
  TypedEventFilter<GoodServiceBurnedEvent>;

export type GoodServiceCreatedEvent = TypedEvent<
  [string, BigNumber, BigNumber, number, string],
  {
    from: string;
    goodId: BigNumber;
    goodServiceId: BigNumber;
    goodServiceState: number;
    goodServiceUri: string;
  }
>;

export type GoodServiceCreatedEventFilter =
  TypedEventFilter<GoodServiceCreatedEvent>;

export type GoodServicePausedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { from: string; goodId: BigNumber; goodServiceId: BigNumber }
>;

export type GoodServicePausedEventFilter =
  TypedEventFilter<GoodServicePausedEvent>;

export type GoodServiceUnpausedEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { from: string; goodId: BigNumber; goodServiceId: BigNumber }
>;

export type GoodServiceUnpausedEventFilter =
  TypedEventFilter<GoodServiceUnpausedEvent>;

export type GoodUnpausedEvent = TypedEvent<
  [string, BigNumber],
  { from: string; goodId: BigNumber }
>;

export type GoodUnpausedEventFilter = TypedEventFilter<GoodUnpausedEvent>;

export interface GoodHelper extends BaseContract {
  contractName: 'GoodHelper';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: GoodHelperInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    'GoodBurned(address,uint256)'(
      from?: null,
      goodId?: null
    ): GoodBurnedEventFilter;
    GoodBurned(from?: null, goodId?: null): GoodBurnedEventFilter;

    'GoodCreated(address,uint256,uint8,string)'(
      from?: null,
      goodId?: null,
      goodState?: null,
      goodUri?: null
    ): GoodCreatedEventFilter;
    GoodCreated(
      from?: null,
      goodId?: null,
      goodState?: null,
      goodUri?: null
    ): GoodCreatedEventFilter;

    'GoodPaused(address,uint256)'(
      from?: null,
      goodId?: null
    ): GoodPausedEventFilter;
    GoodPaused(from?: null, goodId?: null): GoodPausedEventFilter;

    'GoodServiceBurned(address,uint256,uint256)'(
      from?: null,
      goodId?: null,
      goodServiceId?: null
    ): GoodServiceBurnedEventFilter;
    GoodServiceBurned(
      from?: null,
      goodId?: null,
      goodServiceId?: null
    ): GoodServiceBurnedEventFilter;

    'GoodServiceCreated(address,uint256,uint256,uint8,string)'(
      from?: null,
      goodId?: null,
      goodServiceId?: null,
      goodServiceState?: null,
      goodServiceUri?: null
    ): GoodServiceCreatedEventFilter;
    GoodServiceCreated(
      from?: null,
      goodId?: null,
      goodServiceId?: null,
      goodServiceState?: null,
      goodServiceUri?: null
    ): GoodServiceCreatedEventFilter;

    'GoodServicePaused(address,uint256,uint256)'(
      from?: null,
      goodId?: null,
      goodServiceId?: null
    ): GoodServicePausedEventFilter;
    GoodServicePaused(
      from?: null,
      goodId?: null,
      goodServiceId?: null
    ): GoodServicePausedEventFilter;

    'GoodServiceUnpaused(address,uint256,uint256)'(
      from?: null,
      goodId?: null,
      goodServiceId?: null
    ): GoodServiceUnpausedEventFilter;
    GoodServiceUnpaused(
      from?: null,
      goodId?: null,
      goodServiceId?: null
    ): GoodServiceUnpausedEventFilter;

    'GoodUnpaused(address,uint256)'(
      from?: null,
      goodId?: null
    ): GoodUnpausedEventFilter;
    GoodUnpaused(from?: null, goodId?: null): GoodUnpausedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
